; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -linearize-cfg %s | FileCheck %s

define void @missing_phi_pred_bug_alt_swap_br(i1 %cond0, i1 %cond1) {
; CHECK-LABEL: @missing_phi_pred_bug_alt_swap_br(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[BB_SUCC_ID:%.*]] = select i1 [[COND0:%.*]], i32 1, i32 2
; CHECK-NEXT:    br label [[BB1_GUARD:%.*]]
; CHECK:       bb1.guard:
; CHECK-NEXT:    [[PREV_GUARD:%.*]] = icmp eq i32 [[BB_SUCC_ID]], 1
; CHECK-NEXT:    br i1 [[PREV_GUARD]], label [[BB1:%.*]], label [[BB2_GUARD:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[BB1_SUCC_ID:%.*]] = select i1 [[COND1:%.*]], i32 3, i32 2
; CHECK-NEXT:    br label [[BB2_GUARD]]
; CHECK:       bb2.guard:
; CHECK-NEXT:    [[GUARD_VAR:%.*]] = phi i32 [ [[BB1_SUCC_ID]], [[BB1]] ], [ [[BB_SUCC_ID]], [[BB1_GUARD]] ]
; CHECK-NEXT:    [[TMP3_PH:%.*]] = phi i32 [ 1, [[BB1]] ], [ 2, [[BB1_GUARD]] ]
; CHECK-NEXT:    [[PREV_GUARD1:%.*]] = icmp eq i32 [[GUARD_VAR]], 2
; CHECK-NEXT:    br i1 [[PREV_GUARD1]], label [[BB2:%.*]], label [[BB3_GUARD:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP3:%.*]] = phi i32 [ [[TMP3_PH]], [[BB2_GUARD]] ]
; CHECK-NEXT:    store volatile i32 [[TMP3]], i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[BB3_GUARD]]
; CHECK:       bb3.guard:
; CHECK-NEXT:    [[GUARD_VAR2:%.*]] = phi i32 [ 4, [[BB2]] ], [ [[GUARD_VAR]], [[BB2_GUARD]] ]
; CHECK-NEXT:    [[PREV_GUARD3:%.*]] = icmp eq i32 [[GUARD_VAR2]], 3
; CHECK-NEXT:    br i1 [[PREV_GUARD3]], label [[BB3:%.*]], label [[BB4_GUARD:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    store volatile i32 4, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[BB4_GUARD]]
; CHECK:       bb4.guard:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb4:
; CHECK-NEXT:    store volatile i32 5, i32 addrspace(1)* undef
; CHECK-NEXT:    ret void
;
bb:
  br i1 %cond0, label %bb1, label %bb2

bb1:
  br i1 %cond1, label %bb3, label %bb2

bb2:
  %tmp3 = phi i32 [ 1, %bb1 ], [ 2, %bb ]
  store volatile i32 %tmp3, i32 addrspace(1)* undef
  br label %bb4

bb3:
  store volatile i32 4, i32 addrspace(1)* undef
  br label %bb4

bb4:
  store volatile i32 5, i32 addrspace(1)* undef
  ret void
}

; Problem didn't occur with simpler unified return
define void @missing_phi_pred_bug_unified_ret(i1 %cond0, i1 %cond1) {
; CHECK-LABEL: @missing_phi_pred_bug_unified_ret(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[BB_SUCC_ID:%.*]] = select i1 [[COND0:%.*]], i32 2, i32 1
; CHECK-NEXT:    br label [[BB1_GUARD:%.*]]
; CHECK:       bb1.guard:
; CHECK-NEXT:    [[PREV_GUARD:%.*]] = icmp eq i32 [[BB_SUCC_ID]], 1
; CHECK-NEXT:    br i1 [[PREV_GUARD]], label [[BB1:%.*]], label [[BB2_GUARD:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[BB1_SUCC_ID:%.*]] = select i1 [[COND1:%.*]], i32 2, i32 3
; CHECK-NEXT:    br label [[BB2_GUARD]]
; CHECK:       bb2.guard:
; CHECK-NEXT:    [[GUARD_VAR:%.*]] = phi i32 [ [[BB1_SUCC_ID]], [[BB1]] ], [ [[BB_SUCC_ID]], [[BB1_GUARD]] ]
; CHECK-NEXT:    [[TMP3_PH:%.*]] = phi i32 [ 1, [[BB1]] ], [ 2, [[BB1_GUARD]] ]
; CHECK-NEXT:    [[PREV_GUARD1:%.*]] = icmp eq i32 [[GUARD_VAR]], 2
; CHECK-NEXT:    br i1 [[PREV_GUARD1]], label [[BB2:%.*]], label [[BB4_GUARD:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP3:%.*]] = phi i32 [ [[TMP3_PH]], [[BB2_GUARD]] ]
; CHECK-NEXT:    store volatile i32 [[TMP3]], i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[BB4_GUARD]]
; CHECK:       bb4.guard:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb4:
; CHECK-NEXT:    ret void
;
bb:
  br i1 %cond0, label %bb2, label %bb1

bb1:
  br i1 %cond1, label %bb2, label %bb4

bb2:
  %tmp3 = phi i32 [ 1, %bb1 ], [ 2, %bb ]
  store volatile i32 %tmp3, i32 addrspace(1)* undef
  br label %bb4

bb4:
  ret void
}
