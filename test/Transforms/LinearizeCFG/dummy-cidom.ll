; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -linearize-cfg -linearize-whole-function %s | FileCheck %s

define void @dummy_cidom_phis(i1 %cond0) {
; CHECK-LABEL: @dummy_cidom_phis(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ENTRY_LOAD:%.*]] = load volatile i32, i32 addrspace(1)* undef
; CHECK-NEXT:    [[ENTRY_SUCC_ID:%.*]] = select i1 [[COND0:%.*]], i32 1, i32 2
; CHECK-NEXT:    br label [[B1_GUARD:%.*]]
; CHECK:       b1.guard:
; CHECK-NEXT:    [[PREV_GUARD:%.*]] = icmp eq i32 [[ENTRY_SUCC_ID]], 1
; CHECK-NEXT:    br i1 [[PREV_GUARD]], label [[B1:%.*]], label [[B2_GUARD:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    [[B1_LOAD:%.*]] = load volatile i32, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[B2_GUARD]]
; CHECK:       b2.guard:
; CHECK-NEXT:    [[PHI_PH:%.*]] = phi i32 [ [[B1_LOAD]], [[B1]] ], [ [[ENTRY_LOAD]], [[B1_GUARD]] ]
; CHECK-NEXT:    br label [[B2:%.*]]
; CHECK:       b2:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[PHI_PH]], [[B2_GUARD]] ]
; CHECK-NEXT:    store volatile i32 [[PHI]], i32 addrspace(1)* undef
; CHECK-NEXT:    ret void
;
entry:
  %entry.load = load volatile i32, i32 addrspace(1)* undef
  br i1 %cond0, label %b1, label %b2

b1:
  %b1.load = load volatile i32, i32 addrspace(1)* undef
  br label %b2

b2:
  %phi = phi i32 [ %entry.load, %entry ], [ %b1.load, %b1 ]
  store volatile i32 %phi, i32 addrspace(1)* undef
  ret void
}
