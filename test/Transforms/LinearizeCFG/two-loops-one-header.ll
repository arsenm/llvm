; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -linearize-cfg %s | FileCheck %s

define void @two_loops_one_header() {
; CHECK-LABEL: @two_loops_one_header(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOOP_GUARD:%.*]]
; CHECK:       loop.guard:
; CHECK-NEXT:    [[GUARD_VAR:%.*]] = phi i32 [ 1, [[ENTRY:%.*]] ], [ 1, [[LEFT_SPLIT:%.*]] ], [ 1, [[RIGHT_SPLIT:%.*]] ]
; CHECK-NEXT:    [[PREV_GUARD:%.*]] = icmp eq i32 [[GUARD_VAR]], 1
; CHECK-NEXT:    br i1 [[PREV_GUARD]], label [[LOOP:%.*]], label [[RIGHT_GUARD:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    store volatile i32 0, i32 addrspace(1)* undef
; CHECK-NEXT:    [[C:%.*]] = load volatile i1, i1 addrspace(1)* undef
; CHECK-NEXT:    [[TMP0:%.*]] = select i1 [[C]], i32 2, i32 3
; CHECK-NEXT:    br label [[RIGHT_GUARD]]
; CHECK:       left.guard:
; CHECK-NEXT:    [[GUARD_VAR3:%.*]] = phi i32 [ 3, [[RIGHT:%.*]] ], [ [[GUARD_VAR1:%.*]], [[RIGHT_GUARD]] ]
; CHECK-NEXT:    [[LAST:%.*]] = icmp eq i32 [[GUARD_VAR3]], 2
; CHECK-NEXT:    br i1 [[LAST]], label [[LEFT:%.*]], label [[RIGHT_SPLIT]]
; CHECK:       left:
; CHECK-NEXT:    [[BE_GUARD:%.*]] = icmp eq i32 [[GUARD_VAR3]], 2
; CHECK-NEXT:    br i1 [[BE_GUARD]], label [[LEFT_SPLIT4:%.*]], label [[LEFT_SPLIT]]
; CHECK:       left.split4:
; CHECK-NEXT:    store volatile i32 0, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[LEFT_SPLIT]]
; CHECK:       left.split:
; CHECK-NEXT:    br label [[LOOP_GUARD]]
; CHECK:       right.guard:
; CHECK-NEXT:    [[GUARD_VAR1]] = phi i32 [ [[GUARD_VAR]], [[LOOP_GUARD]] ], [ [[TMP0]], [[LOOP]] ]
; CHECK-NEXT:    [[PREV_GUARD2:%.*]] = icmp eq i32 [[GUARD_VAR1]], 3
; CHECK-NEXT:    br i1 [[PREV_GUARD2]], label [[RIGHT]], label [[LEFT_GUARD:%.*]]
; CHECK:       right:
; CHECK-NEXT:    store volatile i32 1, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[LEFT_GUARD]]
; CHECK:       right.split:
; CHECK-NEXT:    br label [[LOOP_GUARD]]
;
entry:
  br label %loop

loop:
  store volatile i32 0, i32 addrspace(1)* undef
  %c = load volatile i1, i1 addrspace(1)* undef
  br i1 %c, label %left, label %right

left:
  store volatile i32 0, i32 addrspace(1)* undef
  br label %loop

right:
  store volatile i32 1, i32 addrspace(1)* undef
  br label %loop
}
