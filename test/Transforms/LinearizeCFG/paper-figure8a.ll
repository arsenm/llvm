; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -linearize-cfg %s | FileCheck %s

; Unstructured blocks: b2, b3, b4, b5, b6

define void @figure8a() {
; CHECK-LABEL: @figure8a(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[B1:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    store volatile i32 1, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[B2_GUARD:%.*]]
; CHECK:       b2.guard:
; CHECK-NEXT:    [[GUARD_VAR:%.*]] = phi i32 [ 2, [[B1]] ], [ 2, [[B6_SPLIT:%.*]] ]
; CHECK-NEXT:    [[PREV_GUARD:%.*]] = icmp eq i32 [[GUARD_VAR]], 2
; CHECK-NEXT:    br i1 [[PREV_GUARD]], label [[B2:%.*]], label [[B3_GUARD:%.*]]
; CHECK:       b2:
; CHECK-NEXT:    store volatile i32 2, i32 addrspace(1)* undef
; CHECK-NEXT:    [[COND0:%.*]] = load volatile i1, i1 addrspace(1)* undef
; CHECK-NEXT:    [[TMP0:%.*]] = select i1 [[COND0]], i32 7, i32 3
; CHECK-NEXT:    br i1 [[COND0]], label [[EXIT:%.*]], label [[B3_GUARD]]
; CHECK:       b3.guard:
; CHECK-NEXT:    [[GUARD_VAR1:%.*]] = phi i32 [ [[GUARD_VAR]], [[B2_GUARD]] ], [ [[TMP0]], [[B2]] ]
; CHECK-NEXT:    [[PREV_GUARD2:%.*]] = icmp eq i32 [[GUARD_VAR1]], 3
; CHECK-NEXT:    br i1 [[PREV_GUARD2]], label [[B3:%.*]], label [[B4_GUARD:%.*]]
; CHECK:       b3:
; CHECK-NEXT:    store volatile i32 3, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[B4_GUARD]]
; CHECK:       b4.guard:
; CHECK-NEXT:    [[GUARD_VAR3:%.*]] = phi i32 [ [[GUARD_VAR1]], [[B3_GUARD]] ], [ 4, [[B3]] ], [ 5, [[B5_SPLIT:%.*]] ]
; CHECK-NEXT:    [[PREV_GUARD4:%.*]] = icmp eq i32 [[GUARD_VAR3]], 4
; CHECK-NEXT:    br i1 [[PREV_GUARD4]], label [[B4:%.*]], label [[B5_GUARD:%.*]]
; CHECK:       b4:
; CHECK-NEXT:    store volatile i32 4, i32 addrspace(1)* undef
; CHECK-NEXT:    [[COND1:%.*]] = load volatile i1, i1 addrspace(1)* undef
; CHECK-NEXT:    [[TMP1:%.*]] = select i1 [[COND1]], i32 6, i32 5
; CHECK-NEXT:    br label [[B5_GUARD]]
; CHECK:       b5.guard:
; CHECK-NEXT:    [[GUARD_VAR5:%.*]] = phi i32 [ [[GUARD_VAR3]], [[B4_GUARD]] ], [ [[TMP1]], [[B4]] ]
; CHECK-NEXT:    [[BE_GUARD:%.*]] = icmp eq i32 [[GUARD_VAR5]], 5
; CHECK-NEXT:    br i1 [[BE_GUARD]], label [[B5:%.*]], label [[B5_SPLIT]]
; CHECK:       b5:
; CHECK-NEXT:    store volatile i32 5, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[B5_SPLIT]]
; CHECK:       b5.split:
; CHECK-NEXT:    [[GUARD_VAR6:%.*]] = phi i32 [ [[GUARD_VAR5]], [[B5_GUARD]] ], [ 5, [[B5]] ]
; CHECK-NEXT:    [[PREV_GUARD7:%.*]] = icmp eq i32 [[GUARD_VAR6]], 4
; CHECK-NEXT:    br i1 [[PREV_GUARD7]], label [[B4_GUARD]], label [[B6_GUARD:%.*]]
; CHECK:       b6.guard:
; CHECK-NEXT:    [[LAST:%.*]] = icmp eq i32 [[GUARD_VAR6]], 6
; CHECK-NEXT:    br i1 [[LAST]], label [[B6:%.*]], label [[EXIT]]
; CHECK:       b6:
; CHECK-NEXT:    [[BE_GUARD10:%.*]] = icmp eq i32 [[GUARD_VAR6]], 6
; CHECK-NEXT:    br i1 [[BE_GUARD10]], label [[B6_SPLIT9:%.*]], label [[B6_SPLIT]]
; CHECK:       b6.split9:
; CHECK-NEXT:    store volatile i32 6, i32 addrspace(1)* undef
; CHECK-NEXT:    br label [[B6_SPLIT]]
; CHECK:       b6.split:
; CHECK-NEXT:    br label [[B2_GUARD]]
; CHECK:       exit:
; CHECK-NEXT:    store volatile i32 7, i32 addrspace(1)* undef
; CHECK-NEXT:    ret void
;
entry:
  br label %b1

b1:
  store volatile i32 1, i32 addrspace(1)* undef
  br label %b2

b2:
  store volatile i32 2, i32 addrspace(1)* undef
  %cond0 = load volatile i1, i1 addrspace(1)* undef
  br i1 %cond0, label %exit, label %b3

b3:
  store volatile i32 3, i32 addrspace(1)* undef
  br label %b4

b4:
  store volatile i32 4, i32 addrspace(1)* undef
  %cond1 = load volatile i1, i1 addrspace(1)* undef
  br i1 %cond1, label %b6, label %b5

b5:
  store volatile i32 5, i32 addrspace(1)* undef
  br label %b4

b6:
  store volatile i32 6, i32 addrspace(1)* undef
  br label %b2

exit:
  store volatile i32 7, i32 addrspace(1)* undef
  ret void
}
